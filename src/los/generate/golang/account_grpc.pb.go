// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: account.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InquiryAccount_GetAccount_FullMethodName            = "/protobuf.los.InquiryAccount/GetAccount"
	InquiryAccount_GetAccountBalance_FullMethodName     = "/protobuf.los.InquiryAccount/GetAccountBalance"
	InquiryAccount_GetCustomerIndividual_FullMethodName = "/protobuf.los.InquiryAccount/GetCustomerIndividual"
	InquiryAccount_GetCustomerCIF_FullMethodName        = "/protobuf.los.InquiryAccount/GetCustomerCIF"
	InquiryAccount_CreateCustomer_FullMethodName        = "/protobuf.los.InquiryAccount/CreateCustomer"
)

// InquiryAccountClient is the client API for InquiryAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InquiryAccountClient interface {
	GetAccount(ctx context.Context, in *RequestAccount, opts ...grpc.CallOption) (*ResponseAccount, error)
	GetAccountBalance(ctx context.Context, in *ReqAccountBalance, opts ...grpc.CallOption) (*ResAccountBalance, error)
	GetCustomerIndividual(ctx context.Context, in *ReqCustomerInfo, opts ...grpc.CallOption) (*ResCustomerIndividualInfo, error)
	GetCustomerCIF(ctx context.Context, in *ReqAccountCIF, opts ...grpc.CallOption) (*ResAccountCIF, error)
	CreateCustomer(ctx context.Context, in *ReqCreateCustomer, opts ...grpc.CallOption) (*ResponseAccount, error)
}

type inquiryAccountClient struct {
	cc grpc.ClientConnInterface
}

func NewInquiryAccountClient(cc grpc.ClientConnInterface) InquiryAccountClient {
	return &inquiryAccountClient{cc}
}

func (c *inquiryAccountClient) GetAccount(ctx context.Context, in *RequestAccount, opts ...grpc.CallOption) (*ResponseAccount, error) {
	out := new(ResponseAccount)
	err := c.cc.Invoke(ctx, InquiryAccount_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inquiryAccountClient) GetAccountBalance(ctx context.Context, in *ReqAccountBalance, opts ...grpc.CallOption) (*ResAccountBalance, error) {
	out := new(ResAccountBalance)
	err := c.cc.Invoke(ctx, InquiryAccount_GetAccountBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inquiryAccountClient) GetCustomerIndividual(ctx context.Context, in *ReqCustomerInfo, opts ...grpc.CallOption) (*ResCustomerIndividualInfo, error) {
	out := new(ResCustomerIndividualInfo)
	err := c.cc.Invoke(ctx, InquiryAccount_GetCustomerIndividual_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inquiryAccountClient) GetCustomerCIF(ctx context.Context, in *ReqAccountCIF, opts ...grpc.CallOption) (*ResAccountCIF, error) {
	out := new(ResAccountCIF)
	err := c.cc.Invoke(ctx, InquiryAccount_GetCustomerCIF_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inquiryAccountClient) CreateCustomer(ctx context.Context, in *ReqCreateCustomer, opts ...grpc.CallOption) (*ResponseAccount, error) {
	out := new(ResponseAccount)
	err := c.cc.Invoke(ctx, InquiryAccount_CreateCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InquiryAccountServer is the server API for InquiryAccount service.
// All implementations should embed UnimplementedInquiryAccountServer
// for forward compatibility
type InquiryAccountServer interface {
	GetAccount(context.Context, *RequestAccount) (*ResponseAccount, error)
	GetAccountBalance(context.Context, *ReqAccountBalance) (*ResAccountBalance, error)
	GetCustomerIndividual(context.Context, *ReqCustomerInfo) (*ResCustomerIndividualInfo, error)
	GetCustomerCIF(context.Context, *ReqAccountCIF) (*ResAccountCIF, error)
	CreateCustomer(context.Context, *ReqCreateCustomer) (*ResponseAccount, error)
}

// UnimplementedInquiryAccountServer should be embedded to have forward compatible implementations.
type UnimplementedInquiryAccountServer struct {
}

func (UnimplementedInquiryAccountServer) GetAccount(context.Context, *RequestAccount) (*ResponseAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedInquiryAccountServer) GetAccountBalance(context.Context, *ReqAccountBalance) (*ResAccountBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedInquiryAccountServer) GetCustomerIndividual(context.Context, *ReqCustomerInfo) (*ResCustomerIndividualInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerIndividual not implemented")
}
func (UnimplementedInquiryAccountServer) GetCustomerCIF(context.Context, *ReqAccountCIF) (*ResAccountCIF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerCIF not implemented")
}
func (UnimplementedInquiryAccountServer) CreateCustomer(context.Context, *ReqCreateCustomer) (*ResponseAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}

// UnsafeInquiryAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InquiryAccountServer will
// result in compilation errors.
type UnsafeInquiryAccountServer interface {
	mustEmbedUnimplementedInquiryAccountServer()
}

func RegisterInquiryAccountServer(s grpc.ServiceRegistrar, srv InquiryAccountServer) {
	s.RegisterService(&InquiryAccount_ServiceDesc, srv)
}

func _InquiryAccount_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InquiryAccountServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InquiryAccount_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InquiryAccountServer).GetAccount(ctx, req.(*RequestAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _InquiryAccount_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAccountBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InquiryAccountServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InquiryAccount_GetAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InquiryAccountServer).GetAccountBalance(ctx, req.(*ReqAccountBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _InquiryAccount_GetCustomerIndividual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCustomerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InquiryAccountServer).GetCustomerIndividual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InquiryAccount_GetCustomerIndividual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InquiryAccountServer).GetCustomerIndividual(ctx, req.(*ReqCustomerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _InquiryAccount_GetCustomerCIF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAccountCIF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InquiryAccountServer).GetCustomerCIF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InquiryAccount_GetCustomerCIF_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InquiryAccountServer).GetCustomerCIF(ctx, req.(*ReqAccountCIF))
	}
	return interceptor(ctx, in, info, handler)
}

func _InquiryAccount_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateCustomer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InquiryAccountServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InquiryAccount_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InquiryAccountServer).CreateCustomer(ctx, req.(*ReqCreateCustomer))
	}
	return interceptor(ctx, in, info, handler)
}

// InquiryAccount_ServiceDesc is the grpc.ServiceDesc for InquiryAccount service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InquiryAccount_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.los.InquiryAccount",
	HandlerType: (*InquiryAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _InquiryAccount_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _InquiryAccount_GetAccountBalance_Handler,
		},
		{
			MethodName: "GetCustomerIndividual",
			Handler:    _InquiryAccount_GetCustomerIndividual_Handler,
		},
		{
			MethodName: "GetCustomerCIF",
			Handler:    _InquiryAccount_GetCustomerCIF_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _InquiryAccount_CreateCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
