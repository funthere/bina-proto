// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: deposit_service.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DepositAccountService_DepositAccountDetail_FullMethodName = "/proto.DepositAccountService/DepositAccountDetail"
	DepositAccountService_DepositAccountCreate_FullMethodName = "/proto.DepositAccountService/DepositAccountCreate"
	DepositAccountService_DepositChangeState_FullMethodName   = "/proto.DepositAccountService/DepositChangeState"
	DepositAccountService_DepositAccountSearch_FullMethodName = "/proto.DepositAccountService/DepositAccountSearch"
	DepositAccountService_DepositAccountList_FullMethodName   = "/proto.DepositAccountService/DepositAccountList"
)

// DepositAccountServiceClient is the client API for DepositAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepositAccountServiceClient interface {
	DepositAccountDetail(ctx context.Context, in *DepositAccountDetailRequest, opts ...grpc.CallOption) (*DepositAccountResponse, error)
	DepositAccountCreate(ctx context.Context, in *DepositCreateRequest, opts ...grpc.CallOption) (*DepositAccountResponse, error)
	DepositChangeState(ctx context.Context, in *DepositChangeStateRequest, opts ...grpc.CallOption) (*DepositAccountResponse, error)
	DepositAccountSearch(ctx context.Context, in *DepositAccountSearchRequest, opts ...grpc.CallOption) (*DepositAccountListResponse, error)
	DepositAccountList(ctx context.Context, in *DepositAccountListParamRequest, opts ...grpc.CallOption) (*DepositAccountListResponse, error)
}

type depositAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepositAccountServiceClient(cc grpc.ClientConnInterface) DepositAccountServiceClient {
	return &depositAccountServiceClient{cc}
}

func (c *depositAccountServiceClient) DepositAccountDetail(ctx context.Context, in *DepositAccountDetailRequest, opts ...grpc.CallOption) (*DepositAccountResponse, error) {
	out := new(DepositAccountResponse)
	err := c.cc.Invoke(ctx, DepositAccountService_DepositAccountDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAccountServiceClient) DepositAccountCreate(ctx context.Context, in *DepositCreateRequest, opts ...grpc.CallOption) (*DepositAccountResponse, error) {
	out := new(DepositAccountResponse)
	err := c.cc.Invoke(ctx, DepositAccountService_DepositAccountCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAccountServiceClient) DepositChangeState(ctx context.Context, in *DepositChangeStateRequest, opts ...grpc.CallOption) (*DepositAccountResponse, error) {
	out := new(DepositAccountResponse)
	err := c.cc.Invoke(ctx, DepositAccountService_DepositChangeState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAccountServiceClient) DepositAccountSearch(ctx context.Context, in *DepositAccountSearchRequest, opts ...grpc.CallOption) (*DepositAccountListResponse, error) {
	out := new(DepositAccountListResponse)
	err := c.cc.Invoke(ctx, DepositAccountService_DepositAccountSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositAccountServiceClient) DepositAccountList(ctx context.Context, in *DepositAccountListParamRequest, opts ...grpc.CallOption) (*DepositAccountListResponse, error) {
	out := new(DepositAccountListResponse)
	err := c.cc.Invoke(ctx, DepositAccountService_DepositAccountList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepositAccountServiceServer is the server API for DepositAccountService service.
// All implementations should embed UnimplementedDepositAccountServiceServer
// for forward compatibility
type DepositAccountServiceServer interface {
	DepositAccountDetail(context.Context, *DepositAccountDetailRequest) (*DepositAccountResponse, error)
	DepositAccountCreate(context.Context, *DepositCreateRequest) (*DepositAccountResponse, error)
	DepositChangeState(context.Context, *DepositChangeStateRequest) (*DepositAccountResponse, error)
	DepositAccountSearch(context.Context, *DepositAccountSearchRequest) (*DepositAccountListResponse, error)
	DepositAccountList(context.Context, *DepositAccountListParamRequest) (*DepositAccountListResponse, error)
}

// UnimplementedDepositAccountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDepositAccountServiceServer struct {
}

func (UnimplementedDepositAccountServiceServer) DepositAccountDetail(context.Context, *DepositAccountDetailRequest) (*DepositAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAccountDetail not implemented")
}
func (UnimplementedDepositAccountServiceServer) DepositAccountCreate(context.Context, *DepositCreateRequest) (*DepositAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAccountCreate not implemented")
}
func (UnimplementedDepositAccountServiceServer) DepositChangeState(context.Context, *DepositChangeStateRequest) (*DepositAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositChangeState not implemented")
}
func (UnimplementedDepositAccountServiceServer) DepositAccountSearch(context.Context, *DepositAccountSearchRequest) (*DepositAccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAccountSearch not implemented")
}
func (UnimplementedDepositAccountServiceServer) DepositAccountList(context.Context, *DepositAccountListParamRequest) (*DepositAccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositAccountList not implemented")
}

// UnsafeDepositAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepositAccountServiceServer will
// result in compilation errors.
type UnsafeDepositAccountServiceServer interface {
	mustEmbedUnimplementedDepositAccountServiceServer()
}

func RegisterDepositAccountServiceServer(s grpc.ServiceRegistrar, srv DepositAccountServiceServer) {
	s.RegisterService(&DepositAccountService_ServiceDesc, srv)
}

func _DepositAccountService_DepositAccountDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositAccountDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAccountServiceServer).DepositAccountDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositAccountService_DepositAccountDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAccountServiceServer).DepositAccountDetail(ctx, req.(*DepositAccountDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAccountService_DepositAccountCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAccountServiceServer).DepositAccountCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositAccountService_DepositAccountCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAccountServiceServer).DepositAccountCreate(ctx, req.(*DepositCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAccountService_DepositChangeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositChangeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAccountServiceServer).DepositChangeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositAccountService_DepositChangeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAccountServiceServer).DepositChangeState(ctx, req.(*DepositChangeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAccountService_DepositAccountSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositAccountSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAccountServiceServer).DepositAccountSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositAccountService_DepositAccountSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAccountServiceServer).DepositAccountSearch(ctx, req.(*DepositAccountSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositAccountService_DepositAccountList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositAccountListParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositAccountServiceServer).DepositAccountList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositAccountService_DepositAccountList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositAccountServiceServer).DepositAccountList(ctx, req.(*DepositAccountListParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepositAccountService_ServiceDesc is the grpc.ServiceDesc for DepositAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepositAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DepositAccountService",
	HandlerType: (*DepositAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DepositAccountDetail",
			Handler:    _DepositAccountService_DepositAccountDetail_Handler,
		},
		{
			MethodName: "DepositAccountCreate",
			Handler:    _DepositAccountService_DepositAccountCreate_Handler,
		},
		{
			MethodName: "DepositChangeState",
			Handler:    _DepositAccountService_DepositChangeState_Handler,
		},
		{
			MethodName: "DepositAccountSearch",
			Handler:    _DepositAccountService_DepositAccountSearch_Handler,
		},
		{
			MethodName: "DepositAccountList",
			Handler:    _DepositAccountService_DepositAccountList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deposit_service.proto",
}

const (
	DepositTransactionService_MakeWithdrawal_FullMethodName        = "/proto.DepositTransactionService/MakeWithdrawal"
	DepositTransactionService_MakeDeposit_FullMethodName           = "/proto.DepositTransactionService/MakeDeposit"
	DepositTransactionService_MakeTransfer_FullMethodName          = "/proto.DepositTransactionService/MakeTransfer"
	DepositTransactionService_Adjustment_FullMethodName            = "/proto.DepositTransactionService/Adjustment"
	DepositTransactionService_WithdrawalTrx_FullMethodName         = "/proto.DepositTransactionService/WithdrawalTrx"
	DepositTransactionService_ApplyFee_FullMethodName              = "/proto.DepositTransactionService/ApplyFee"
	DepositTransactionService_DepositTrx_FullMethodName            = "/proto.DepositTransactionService/DepositTrx"
	DepositTransactionService_TransferTrx_FullMethodName           = "/proto.DepositTransactionService/TransferTrx"
	DepositTransactionService_ListTransaction_FullMethodName       = "/proto.DepositTransactionService/ListTransaction"
	DepositTransactionService_ReversalTransaction_FullMethodName   = "/proto.DepositTransactionService/ReversalTransaction"
	DepositTransactionService_SearchListTransaction_FullMethodName = "/proto.DepositTransactionService/SearchListTransaction"
)

// DepositTransactionServiceClient is the client API for DepositTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepositTransactionServiceClient interface {
	MakeWithdrawal(ctx context.Context, in *DepositTransactionRequest, opts ...grpc.CallOption) (*DepositTransactionResponse, error)
	MakeDeposit(ctx context.Context, in *DepositTransactionRequest, opts ...grpc.CallOption) (*DepositTransactionResponse, error)
	MakeTransfer(ctx context.Context, in *TransferTransactionRequest, opts ...grpc.CallOption) (*DepositTransactionResponse, error)
	Adjustment(ctx context.Context, in *AdjustTransactionRequest, opts ...grpc.CallOption) (*DepositTransactionResponse, error)
	WithdrawalTrx(ctx context.Context, in *TransactionDepositRequest, opts ...grpc.CallOption) (*TransactionDepositResponse, error)
	ApplyFee(ctx context.Context, in *FeeTransactionRequest, opts ...grpc.CallOption) (*FeeTransactionResponse, error)
	DepositTrx(ctx context.Context, in *TransactionDepositRequest, opts ...grpc.CallOption) (*TransactionDepositResponse, error)
	TransferTrx(ctx context.Context, in *TransactionTransferRequest, opts ...grpc.CallOption) (*TransactionDepositResponse, error)
	ListTransaction(ctx context.Context, in *DepositTransactionListRequest, opts ...grpc.CallOption) (*DepositTransactionListResponse, error)
	ReversalTransaction(ctx context.Context, in *ReverseDepositTransactionRequest, opts ...grpc.CallOption) (*TransactionDepositResponse, error)
	SearchListTransaction(ctx context.Context, in *DepositTransactionSearchRequest, opts ...grpc.CallOption) (*DepositTransactionListResponse, error)
}

type depositTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepositTransactionServiceClient(cc grpc.ClientConnInterface) DepositTransactionServiceClient {
	return &depositTransactionServiceClient{cc}
}

func (c *depositTransactionServiceClient) MakeWithdrawal(ctx context.Context, in *DepositTransactionRequest, opts ...grpc.CallOption) (*DepositTransactionResponse, error) {
	out := new(DepositTransactionResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_MakeWithdrawal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionServiceClient) MakeDeposit(ctx context.Context, in *DepositTransactionRequest, opts ...grpc.CallOption) (*DepositTransactionResponse, error) {
	out := new(DepositTransactionResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_MakeDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionServiceClient) MakeTransfer(ctx context.Context, in *TransferTransactionRequest, opts ...grpc.CallOption) (*DepositTransactionResponse, error) {
	out := new(DepositTransactionResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_MakeTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionServiceClient) Adjustment(ctx context.Context, in *AdjustTransactionRequest, opts ...grpc.CallOption) (*DepositTransactionResponse, error) {
	out := new(DepositTransactionResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_Adjustment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionServiceClient) WithdrawalTrx(ctx context.Context, in *TransactionDepositRequest, opts ...grpc.CallOption) (*TransactionDepositResponse, error) {
	out := new(TransactionDepositResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_WithdrawalTrx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionServiceClient) ApplyFee(ctx context.Context, in *FeeTransactionRequest, opts ...grpc.CallOption) (*FeeTransactionResponse, error) {
	out := new(FeeTransactionResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_ApplyFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionServiceClient) DepositTrx(ctx context.Context, in *TransactionDepositRequest, opts ...grpc.CallOption) (*TransactionDepositResponse, error) {
	out := new(TransactionDepositResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_DepositTrx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionServiceClient) TransferTrx(ctx context.Context, in *TransactionTransferRequest, opts ...grpc.CallOption) (*TransactionDepositResponse, error) {
	out := new(TransactionDepositResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_TransferTrx_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionServiceClient) ListTransaction(ctx context.Context, in *DepositTransactionListRequest, opts ...grpc.CallOption) (*DepositTransactionListResponse, error) {
	out := new(DepositTransactionListResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_ListTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionServiceClient) ReversalTransaction(ctx context.Context, in *ReverseDepositTransactionRequest, opts ...grpc.CallOption) (*TransactionDepositResponse, error) {
	out := new(TransactionDepositResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_ReversalTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depositTransactionServiceClient) SearchListTransaction(ctx context.Context, in *DepositTransactionSearchRequest, opts ...grpc.CallOption) (*DepositTransactionListResponse, error) {
	out := new(DepositTransactionListResponse)
	err := c.cc.Invoke(ctx, DepositTransactionService_SearchListTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepositTransactionServiceServer is the server API for DepositTransactionService service.
// All implementations should embed UnimplementedDepositTransactionServiceServer
// for forward compatibility
type DepositTransactionServiceServer interface {
	MakeWithdrawal(context.Context, *DepositTransactionRequest) (*DepositTransactionResponse, error)
	MakeDeposit(context.Context, *DepositTransactionRequest) (*DepositTransactionResponse, error)
	MakeTransfer(context.Context, *TransferTransactionRequest) (*DepositTransactionResponse, error)
	Adjustment(context.Context, *AdjustTransactionRequest) (*DepositTransactionResponse, error)
	WithdrawalTrx(context.Context, *TransactionDepositRequest) (*TransactionDepositResponse, error)
	ApplyFee(context.Context, *FeeTransactionRequest) (*FeeTransactionResponse, error)
	DepositTrx(context.Context, *TransactionDepositRequest) (*TransactionDepositResponse, error)
	TransferTrx(context.Context, *TransactionTransferRequest) (*TransactionDepositResponse, error)
	ListTransaction(context.Context, *DepositTransactionListRequest) (*DepositTransactionListResponse, error)
	ReversalTransaction(context.Context, *ReverseDepositTransactionRequest) (*TransactionDepositResponse, error)
	SearchListTransaction(context.Context, *DepositTransactionSearchRequest) (*DepositTransactionListResponse, error)
}

// UnimplementedDepositTransactionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDepositTransactionServiceServer struct {
}

func (UnimplementedDepositTransactionServiceServer) MakeWithdrawal(context.Context, *DepositTransactionRequest) (*DepositTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeWithdrawal not implemented")
}
func (UnimplementedDepositTransactionServiceServer) MakeDeposit(context.Context, *DepositTransactionRequest) (*DepositTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDeposit not implemented")
}
func (UnimplementedDepositTransactionServiceServer) MakeTransfer(context.Context, *TransferTransactionRequest) (*DepositTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeTransfer not implemented")
}
func (UnimplementedDepositTransactionServiceServer) Adjustment(context.Context, *AdjustTransactionRequest) (*DepositTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Adjustment not implemented")
}
func (UnimplementedDepositTransactionServiceServer) WithdrawalTrx(context.Context, *TransactionDepositRequest) (*TransactionDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalTrx not implemented")
}
func (UnimplementedDepositTransactionServiceServer) ApplyFee(context.Context, *FeeTransactionRequest) (*FeeTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFee not implemented")
}
func (UnimplementedDepositTransactionServiceServer) DepositTrx(context.Context, *TransactionDepositRequest) (*TransactionDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositTrx not implemented")
}
func (UnimplementedDepositTransactionServiceServer) TransferTrx(context.Context, *TransactionTransferRequest) (*TransactionDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferTrx not implemented")
}
func (UnimplementedDepositTransactionServiceServer) ListTransaction(context.Context, *DepositTransactionListRequest) (*DepositTransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransaction not implemented")
}
func (UnimplementedDepositTransactionServiceServer) ReversalTransaction(context.Context, *ReverseDepositTransactionRequest) (*TransactionDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReversalTransaction not implemented")
}
func (UnimplementedDepositTransactionServiceServer) SearchListTransaction(context.Context, *DepositTransactionSearchRequest) (*DepositTransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchListTransaction not implemented")
}

// UnsafeDepositTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepositTransactionServiceServer will
// result in compilation errors.
type UnsafeDepositTransactionServiceServer interface {
	mustEmbedUnimplementedDepositTransactionServiceServer()
}

func RegisterDepositTransactionServiceServer(s grpc.ServiceRegistrar, srv DepositTransactionServiceServer) {
	s.RegisterService(&DepositTransactionService_ServiceDesc, srv)
}

func _DepositTransactionService_MakeWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).MakeWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_MakeWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).MakeWithdrawal(ctx, req.(*DepositTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionService_MakeDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).MakeDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_MakeDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).MakeDeposit(ctx, req.(*DepositTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionService_MakeTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).MakeTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_MakeTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).MakeTransfer(ctx, req.(*TransferTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionService_Adjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).Adjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_Adjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).Adjustment(ctx, req.(*AdjustTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionService_WithdrawalTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).WithdrawalTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_WithdrawalTrx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).WithdrawalTrx(ctx, req.(*TransactionDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionService_ApplyFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).ApplyFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_ApplyFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).ApplyFee(ctx, req.(*FeeTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionService_DepositTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).DepositTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_DepositTrx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).DepositTrx(ctx, req.(*TransactionDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionService_TransferTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).TransferTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_TransferTrx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).TransferTrx(ctx, req.(*TransactionTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionService_ListTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositTransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).ListTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_ListTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).ListTransaction(ctx, req.(*DepositTransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionService_ReversalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReverseDepositTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).ReversalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_ReversalTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).ReversalTransaction(ctx, req.(*ReverseDepositTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepositTransactionService_SearchListTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositTransactionSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositTransactionServiceServer).SearchListTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositTransactionService_SearchListTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositTransactionServiceServer).SearchListTransaction(ctx, req.(*DepositTransactionSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepositTransactionService_ServiceDesc is the grpc.ServiceDesc for DepositTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepositTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DepositTransactionService",
	HandlerType: (*DepositTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeWithdrawal",
			Handler:    _DepositTransactionService_MakeWithdrawal_Handler,
		},
		{
			MethodName: "MakeDeposit",
			Handler:    _DepositTransactionService_MakeDeposit_Handler,
		},
		{
			MethodName: "MakeTransfer",
			Handler:    _DepositTransactionService_MakeTransfer_Handler,
		},
		{
			MethodName: "Adjustment",
			Handler:    _DepositTransactionService_Adjustment_Handler,
		},
		{
			MethodName: "WithdrawalTrx",
			Handler:    _DepositTransactionService_WithdrawalTrx_Handler,
		},
		{
			MethodName: "ApplyFee",
			Handler:    _DepositTransactionService_ApplyFee_Handler,
		},
		{
			MethodName: "DepositTrx",
			Handler:    _DepositTransactionService_DepositTrx_Handler,
		},
		{
			MethodName: "TransferTrx",
			Handler:    _DepositTransactionService_TransferTrx_Handler,
		},
		{
			MethodName: "ListTransaction",
			Handler:    _DepositTransactionService_ListTransaction_Handler,
		},
		{
			MethodName: "ReversalTransaction",
			Handler:    _DepositTransactionService_ReversalTransaction_Handler,
		},
		{
			MethodName: "SearchListTransaction",
			Handler:    _DepositTransactionService_SearchListTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deposit_service.proto",
}

const (
	DepositProductService_DepositProductDetail_FullMethodName = "/proto.DepositProductService/DepositProductDetail"
)

// DepositProductServiceClient is the client API for DepositProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepositProductServiceClient interface {
	DepositProductDetail(ctx context.Context, in *DepositProductDetailRequest, opts ...grpc.CallOption) (*DepositProductResponse, error)
}

type depositProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepositProductServiceClient(cc grpc.ClientConnInterface) DepositProductServiceClient {
	return &depositProductServiceClient{cc}
}

func (c *depositProductServiceClient) DepositProductDetail(ctx context.Context, in *DepositProductDetailRequest, opts ...grpc.CallOption) (*DepositProductResponse, error) {
	out := new(DepositProductResponse)
	err := c.cc.Invoke(ctx, DepositProductService_DepositProductDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepositProductServiceServer is the server API for DepositProductService service.
// All implementations should embed UnimplementedDepositProductServiceServer
// for forward compatibility
type DepositProductServiceServer interface {
	DepositProductDetail(context.Context, *DepositProductDetailRequest) (*DepositProductResponse, error)
}

// UnimplementedDepositProductServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDepositProductServiceServer struct {
}

func (UnimplementedDepositProductServiceServer) DepositProductDetail(context.Context, *DepositProductDetailRequest) (*DepositProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositProductDetail not implemented")
}

// UnsafeDepositProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepositProductServiceServer will
// result in compilation errors.
type UnsafeDepositProductServiceServer interface {
	mustEmbedUnimplementedDepositProductServiceServer()
}

func RegisterDepositProductServiceServer(s grpc.ServiceRegistrar, srv DepositProductServiceServer) {
	s.RegisterService(&DepositProductService_ServiceDesc, srv)
}

func _DepositProductService_DepositProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepositProductServiceServer).DepositProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DepositProductService_DepositProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepositProductServiceServer).DepositProductDetail(ctx, req.(*DepositProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepositProductService_ServiceDesc is the grpc.ServiceDesc for DepositProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepositProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DepositProductService",
	HandlerType: (*DepositProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DepositProductDetail",
			Handler:    _DepositProductService_DepositProductDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deposit_service.proto",
}
