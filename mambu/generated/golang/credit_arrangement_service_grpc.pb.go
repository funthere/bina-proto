// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: credit_arrangement_service.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CreditArrangementService_CreditArrangementCreate_FullMethodName        = "/proto.CreditArrangementService/CreditArrangementCreate"
	CreditArrangementService_CreditArrangementAddAccount_FullMethodName    = "/proto.CreditArrangementService/CreditArrangementAddAccount"
	CreditArrangementService_CreditArrangementRemoveAccount_FullMethodName = "/proto.CreditArrangementService/CreditArrangementRemoveAccount"
	CreditArrangementService_CreditArrangementUpdate_FullMethodName        = "/proto.CreditArrangementService/CreditArrangementUpdate"
	CreditArrangementService_CreditArrangementDetail_FullMethodName        = "/proto.CreditArrangementService/CreditArrangementDetail"
	CreditArrangementService_CreditArrangementSearch_FullMethodName        = "/proto.CreditArrangementService/CreditArrangementSearch"
)

// CreditArrangementServiceClient is the client API for CreditArrangementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreditArrangementServiceClient interface {
	CreditArrangementCreate(ctx context.Context, in *CreditArrangementCreateRequest, opts ...grpc.CallOption) (*CreditArrangementResponse, error)
	CreditArrangementAddAccount(ctx context.Context, in *CreditArrangementAccountRequest, opts ...grpc.CallOption) (*CreditArrangementAccountResponse, error)
	CreditArrangementRemoveAccount(ctx context.Context, in *CreditArrangementAccountRequest, opts ...grpc.CallOption) (*CreditArrangementAccountResponse, error)
	CreditArrangementUpdate(ctx context.Context, in *CreditArrangementUpdateRequest, opts ...grpc.CallOption) (*CreditArrangementResponse, error)
	CreditArrangementDetail(ctx context.Context, in *CreditArrangementDetailRequest, opts ...grpc.CallOption) (*CreditArrangementResponse, error)
	CreditArrangementSearch(ctx context.Context, in *CreditArrangementSearchRequest, opts ...grpc.CallOption) (*CreditArrangementListResponse, error)
}

type creditArrangementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditArrangementServiceClient(cc grpc.ClientConnInterface) CreditArrangementServiceClient {
	return &creditArrangementServiceClient{cc}
}

func (c *creditArrangementServiceClient) CreditArrangementCreate(ctx context.Context, in *CreditArrangementCreateRequest, opts ...grpc.CallOption) (*CreditArrangementResponse, error) {
	out := new(CreditArrangementResponse)
	err := c.cc.Invoke(ctx, CreditArrangementService_CreditArrangementCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditArrangementServiceClient) CreditArrangementAddAccount(ctx context.Context, in *CreditArrangementAccountRequest, opts ...grpc.CallOption) (*CreditArrangementAccountResponse, error) {
	out := new(CreditArrangementAccountResponse)
	err := c.cc.Invoke(ctx, CreditArrangementService_CreditArrangementAddAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditArrangementServiceClient) CreditArrangementRemoveAccount(ctx context.Context, in *CreditArrangementAccountRequest, opts ...grpc.CallOption) (*CreditArrangementAccountResponse, error) {
	out := new(CreditArrangementAccountResponse)
	err := c.cc.Invoke(ctx, CreditArrangementService_CreditArrangementRemoveAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditArrangementServiceClient) CreditArrangementUpdate(ctx context.Context, in *CreditArrangementUpdateRequest, opts ...grpc.CallOption) (*CreditArrangementResponse, error) {
	out := new(CreditArrangementResponse)
	err := c.cc.Invoke(ctx, CreditArrangementService_CreditArrangementUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditArrangementServiceClient) CreditArrangementDetail(ctx context.Context, in *CreditArrangementDetailRequest, opts ...grpc.CallOption) (*CreditArrangementResponse, error) {
	out := new(CreditArrangementResponse)
	err := c.cc.Invoke(ctx, CreditArrangementService_CreditArrangementDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditArrangementServiceClient) CreditArrangementSearch(ctx context.Context, in *CreditArrangementSearchRequest, opts ...grpc.CallOption) (*CreditArrangementListResponse, error) {
	out := new(CreditArrangementListResponse)
	err := c.cc.Invoke(ctx, CreditArrangementService_CreditArrangementSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditArrangementServiceServer is the server API for CreditArrangementService service.
// All implementations should embed UnimplementedCreditArrangementServiceServer
// for forward compatibility
type CreditArrangementServiceServer interface {
	CreditArrangementCreate(context.Context, *CreditArrangementCreateRequest) (*CreditArrangementResponse, error)
	CreditArrangementAddAccount(context.Context, *CreditArrangementAccountRequest) (*CreditArrangementAccountResponse, error)
	CreditArrangementRemoveAccount(context.Context, *CreditArrangementAccountRequest) (*CreditArrangementAccountResponse, error)
	CreditArrangementUpdate(context.Context, *CreditArrangementUpdateRequest) (*CreditArrangementResponse, error)
	CreditArrangementDetail(context.Context, *CreditArrangementDetailRequest) (*CreditArrangementResponse, error)
	CreditArrangementSearch(context.Context, *CreditArrangementSearchRequest) (*CreditArrangementListResponse, error)
}

// UnimplementedCreditArrangementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCreditArrangementServiceServer struct {
}

func (UnimplementedCreditArrangementServiceServer) CreditArrangementCreate(context.Context, *CreditArrangementCreateRequest) (*CreditArrangementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditArrangementCreate not implemented")
}
func (UnimplementedCreditArrangementServiceServer) CreditArrangementAddAccount(context.Context, *CreditArrangementAccountRequest) (*CreditArrangementAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditArrangementAddAccount not implemented")
}
func (UnimplementedCreditArrangementServiceServer) CreditArrangementRemoveAccount(context.Context, *CreditArrangementAccountRequest) (*CreditArrangementAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditArrangementRemoveAccount not implemented")
}
func (UnimplementedCreditArrangementServiceServer) CreditArrangementUpdate(context.Context, *CreditArrangementUpdateRequest) (*CreditArrangementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditArrangementUpdate not implemented")
}
func (UnimplementedCreditArrangementServiceServer) CreditArrangementDetail(context.Context, *CreditArrangementDetailRequest) (*CreditArrangementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditArrangementDetail not implemented")
}
func (UnimplementedCreditArrangementServiceServer) CreditArrangementSearch(context.Context, *CreditArrangementSearchRequest) (*CreditArrangementListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditArrangementSearch not implemented")
}

// UnsafeCreditArrangementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditArrangementServiceServer will
// result in compilation errors.
type UnsafeCreditArrangementServiceServer interface {
	mustEmbedUnimplementedCreditArrangementServiceServer()
}

func RegisterCreditArrangementServiceServer(s grpc.ServiceRegistrar, srv CreditArrangementServiceServer) {
	s.RegisterService(&CreditArrangementService_ServiceDesc, srv)
}

func _CreditArrangementService_CreditArrangementCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditArrangementCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditArrangementServiceServer).CreditArrangementCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditArrangementService_CreditArrangementCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditArrangementServiceServer).CreditArrangementCreate(ctx, req.(*CreditArrangementCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditArrangementService_CreditArrangementAddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditArrangementAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditArrangementServiceServer).CreditArrangementAddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditArrangementService_CreditArrangementAddAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditArrangementServiceServer).CreditArrangementAddAccount(ctx, req.(*CreditArrangementAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditArrangementService_CreditArrangementRemoveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditArrangementAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditArrangementServiceServer).CreditArrangementRemoveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditArrangementService_CreditArrangementRemoveAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditArrangementServiceServer).CreditArrangementRemoveAccount(ctx, req.(*CreditArrangementAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditArrangementService_CreditArrangementUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditArrangementUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditArrangementServiceServer).CreditArrangementUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditArrangementService_CreditArrangementUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditArrangementServiceServer).CreditArrangementUpdate(ctx, req.(*CreditArrangementUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditArrangementService_CreditArrangementDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditArrangementDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditArrangementServiceServer).CreditArrangementDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditArrangementService_CreditArrangementDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditArrangementServiceServer).CreditArrangementDetail(ctx, req.(*CreditArrangementDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditArrangementService_CreditArrangementSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditArrangementSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditArrangementServiceServer).CreditArrangementSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditArrangementService_CreditArrangementSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditArrangementServiceServer).CreditArrangementSearch(ctx, req.(*CreditArrangementSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditArrangementService_ServiceDesc is the grpc.ServiceDesc for CreditArrangementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditArrangementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CreditArrangementService",
	HandlerType: (*CreditArrangementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreditArrangementCreate",
			Handler:    _CreditArrangementService_CreditArrangementCreate_Handler,
		},
		{
			MethodName: "CreditArrangementAddAccount",
			Handler:    _CreditArrangementService_CreditArrangementAddAccount_Handler,
		},
		{
			MethodName: "CreditArrangementRemoveAccount",
			Handler:    _CreditArrangementService_CreditArrangementRemoveAccount_Handler,
		},
		{
			MethodName: "CreditArrangementUpdate",
			Handler:    _CreditArrangementService_CreditArrangementUpdate_Handler,
		},
		{
			MethodName: "CreditArrangementDetail",
			Handler:    _CreditArrangementService_CreditArrangementDetail_Handler,
		},
		{
			MethodName: "CreditArrangementSearch",
			Handler:    _CreditArrangementService_CreditArrangementSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credit_arrangement_service.proto",
}
