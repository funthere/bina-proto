// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: loan_service.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LoanAccountService_LoanAccountDetail_FullMethodName                = "/proto.LoanAccountService/LoanAccountDetail"
	LoanAccountService_LoanAccountCreate_FullMethodName                = "/proto.LoanAccountService/LoanAccountCreate"
	LoanAccountService_LoanAccountChangeState_FullMethodName           = "/proto.LoanAccountService/LoanAccountChangeState"
	LoanAccountService_LoanAccountPayOff_FullMethodName                = "/proto.LoanAccountService/LoanAccountPayOff"
	LoanAccountService_LoanAccountPreviewSchedule_FullMethodName       = "/proto.LoanAccountService/LoanAccountPreviewSchedule"
	LoanAccountService_LoanAccountPreviewPayOffAmounts_FullMethodName  = "/proto.LoanAccountService/LoanAccountPreviewPayOffAmounts"
	LoanAccountService_GetPreviewScheduleForLoanAccount_FullMethodName = "/proto.LoanAccountService/GetPreviewScheduleForLoanAccount"
)

// LoanAccountServiceClient is the client API for LoanAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanAccountServiceClient interface {
	LoanAccountDetail(ctx context.Context, in *LoanAccountDetailRequest, opts ...grpc.CallOption) (*LoanAccountResponse, error)
	LoanAccountCreate(ctx context.Context, in *LoadAccountCreateRequest, opts ...grpc.CallOption) (*LoanAccountResponse, error)
	LoanAccountChangeState(ctx context.Context, in *LoanChangeStateRequest, opts ...grpc.CallOption) (*LoanAccountResponse, error)
	LoanAccountPayOff(ctx context.Context, in *LoanAccountPayOffRequest, opts ...grpc.CallOption) (*LoanAccountPayOffResponse, error)
	LoanAccountPreviewSchedule(ctx context.Context, in *LoanAccountPreviewScheduleRequest, opts ...grpc.CallOption) (*LoanAccountPreviewScheduleResponse, error)
	LoanAccountPreviewPayOffAmounts(ctx context.Context, in *LoanAccountPreviewPayOffAmountRequest, opts ...grpc.CallOption) (*LoanAccountPreviewPayOffAmountResponse, error)
	GetPreviewScheduleForLoanAccount(ctx context.Context, in *LoanAccountDetailRequest, opts ...grpc.CallOption) (*LoanAccountPreviewScheduleResponse, error)
}

type loanAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanAccountServiceClient(cc grpc.ClientConnInterface) LoanAccountServiceClient {
	return &loanAccountServiceClient{cc}
}

func (c *loanAccountServiceClient) LoanAccountDetail(ctx context.Context, in *LoanAccountDetailRequest, opts ...grpc.CallOption) (*LoanAccountResponse, error) {
	out := new(LoanAccountResponse)
	err := c.cc.Invoke(ctx, LoanAccountService_LoanAccountDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAccountServiceClient) LoanAccountCreate(ctx context.Context, in *LoadAccountCreateRequest, opts ...grpc.CallOption) (*LoanAccountResponse, error) {
	out := new(LoanAccountResponse)
	err := c.cc.Invoke(ctx, LoanAccountService_LoanAccountCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAccountServiceClient) LoanAccountChangeState(ctx context.Context, in *LoanChangeStateRequest, opts ...grpc.CallOption) (*LoanAccountResponse, error) {
	out := new(LoanAccountResponse)
	err := c.cc.Invoke(ctx, LoanAccountService_LoanAccountChangeState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAccountServiceClient) LoanAccountPayOff(ctx context.Context, in *LoanAccountPayOffRequest, opts ...grpc.CallOption) (*LoanAccountPayOffResponse, error) {
	out := new(LoanAccountPayOffResponse)
	err := c.cc.Invoke(ctx, LoanAccountService_LoanAccountPayOff_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAccountServiceClient) LoanAccountPreviewSchedule(ctx context.Context, in *LoanAccountPreviewScheduleRequest, opts ...grpc.CallOption) (*LoanAccountPreviewScheduleResponse, error) {
	out := new(LoanAccountPreviewScheduleResponse)
	err := c.cc.Invoke(ctx, LoanAccountService_LoanAccountPreviewSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAccountServiceClient) LoanAccountPreviewPayOffAmounts(ctx context.Context, in *LoanAccountPreviewPayOffAmountRequest, opts ...grpc.CallOption) (*LoanAccountPreviewPayOffAmountResponse, error) {
	out := new(LoanAccountPreviewPayOffAmountResponse)
	err := c.cc.Invoke(ctx, LoanAccountService_LoanAccountPreviewPayOffAmounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAccountServiceClient) GetPreviewScheduleForLoanAccount(ctx context.Context, in *LoanAccountDetailRequest, opts ...grpc.CallOption) (*LoanAccountPreviewScheduleResponse, error) {
	out := new(LoanAccountPreviewScheduleResponse)
	err := c.cc.Invoke(ctx, LoanAccountService_GetPreviewScheduleForLoanAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanAccountServiceServer is the server API for LoanAccountService service.
// All implementations should embed UnimplementedLoanAccountServiceServer
// for forward compatibility
type LoanAccountServiceServer interface {
	LoanAccountDetail(context.Context, *LoanAccountDetailRequest) (*LoanAccountResponse, error)
	LoanAccountCreate(context.Context, *LoadAccountCreateRequest) (*LoanAccountResponse, error)
	LoanAccountChangeState(context.Context, *LoanChangeStateRequest) (*LoanAccountResponse, error)
	LoanAccountPayOff(context.Context, *LoanAccountPayOffRequest) (*LoanAccountPayOffResponse, error)
	LoanAccountPreviewSchedule(context.Context, *LoanAccountPreviewScheduleRequest) (*LoanAccountPreviewScheduleResponse, error)
	LoanAccountPreviewPayOffAmounts(context.Context, *LoanAccountPreviewPayOffAmountRequest) (*LoanAccountPreviewPayOffAmountResponse, error)
	GetPreviewScheduleForLoanAccount(context.Context, *LoanAccountDetailRequest) (*LoanAccountPreviewScheduleResponse, error)
}

// UnimplementedLoanAccountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLoanAccountServiceServer struct {
}

func (UnimplementedLoanAccountServiceServer) LoanAccountDetail(context.Context, *LoanAccountDetailRequest) (*LoanAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanAccountDetail not implemented")
}
func (UnimplementedLoanAccountServiceServer) LoanAccountCreate(context.Context, *LoadAccountCreateRequest) (*LoanAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanAccountCreate not implemented")
}
func (UnimplementedLoanAccountServiceServer) LoanAccountChangeState(context.Context, *LoanChangeStateRequest) (*LoanAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanAccountChangeState not implemented")
}
func (UnimplementedLoanAccountServiceServer) LoanAccountPayOff(context.Context, *LoanAccountPayOffRequest) (*LoanAccountPayOffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanAccountPayOff not implemented")
}
func (UnimplementedLoanAccountServiceServer) LoanAccountPreviewSchedule(context.Context, *LoanAccountPreviewScheduleRequest) (*LoanAccountPreviewScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanAccountPreviewSchedule not implemented")
}
func (UnimplementedLoanAccountServiceServer) LoanAccountPreviewPayOffAmounts(context.Context, *LoanAccountPreviewPayOffAmountRequest) (*LoanAccountPreviewPayOffAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanAccountPreviewPayOffAmounts not implemented")
}
func (UnimplementedLoanAccountServiceServer) GetPreviewScheduleForLoanAccount(context.Context, *LoanAccountDetailRequest) (*LoanAccountPreviewScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviewScheduleForLoanAccount not implemented")
}

// UnsafeLoanAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanAccountServiceServer will
// result in compilation errors.
type UnsafeLoanAccountServiceServer interface {
	mustEmbedUnimplementedLoanAccountServiceServer()
}

func RegisterLoanAccountServiceServer(s grpc.ServiceRegistrar, srv LoanAccountServiceServer) {
	s.RegisterService(&LoanAccountService_ServiceDesc, srv)
}

func _LoanAccountService_LoanAccountDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanAccountDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAccountServiceServer).LoanAccountDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAccountService_LoanAccountDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAccountServiceServer).LoanAccountDetail(ctx, req.(*LoanAccountDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAccountService_LoanAccountCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadAccountCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAccountServiceServer).LoanAccountCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAccountService_LoanAccountCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAccountServiceServer).LoanAccountCreate(ctx, req.(*LoadAccountCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAccountService_LoanAccountChangeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanChangeStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAccountServiceServer).LoanAccountChangeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAccountService_LoanAccountChangeState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAccountServiceServer).LoanAccountChangeState(ctx, req.(*LoanChangeStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAccountService_LoanAccountPayOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanAccountPayOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAccountServiceServer).LoanAccountPayOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAccountService_LoanAccountPayOff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAccountServiceServer).LoanAccountPayOff(ctx, req.(*LoanAccountPayOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAccountService_LoanAccountPreviewSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanAccountPreviewScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAccountServiceServer).LoanAccountPreviewSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAccountService_LoanAccountPreviewSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAccountServiceServer).LoanAccountPreviewSchedule(ctx, req.(*LoanAccountPreviewScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAccountService_LoanAccountPreviewPayOffAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanAccountPreviewPayOffAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAccountServiceServer).LoanAccountPreviewPayOffAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAccountService_LoanAccountPreviewPayOffAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAccountServiceServer).LoanAccountPreviewPayOffAmounts(ctx, req.(*LoanAccountPreviewPayOffAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAccountService_GetPreviewScheduleForLoanAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanAccountDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAccountServiceServer).GetPreviewScheduleForLoanAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAccountService_GetPreviewScheduleForLoanAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAccountServiceServer).GetPreviewScheduleForLoanAccount(ctx, req.(*LoanAccountDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanAccountService_ServiceDesc is the grpc.ServiceDesc for LoanAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoanAccountService",
	HandlerType: (*LoanAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoanAccountDetail",
			Handler:    _LoanAccountService_LoanAccountDetail_Handler,
		},
		{
			MethodName: "LoanAccountCreate",
			Handler:    _LoanAccountService_LoanAccountCreate_Handler,
		},
		{
			MethodName: "LoanAccountChangeState",
			Handler:    _LoanAccountService_LoanAccountChangeState_Handler,
		},
		{
			MethodName: "LoanAccountPayOff",
			Handler:    _LoanAccountService_LoanAccountPayOff_Handler,
		},
		{
			MethodName: "LoanAccountPreviewSchedule",
			Handler:    _LoanAccountService_LoanAccountPreviewSchedule_Handler,
		},
		{
			MethodName: "LoanAccountPreviewPayOffAmounts",
			Handler:    _LoanAccountService_LoanAccountPreviewPayOffAmounts_Handler,
		},
		{
			MethodName: "GetPreviewScheduleForLoanAccount",
			Handler:    _LoanAccountService_GetPreviewScheduleForLoanAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan_service.proto",
}

const (
	LoanTransactionService_MakeDisbursement_FullMethodName = "/proto.LoanTransactionService/MakeDisbursement"
	LoanTransactionService_ApplyFee_FullMethodName         = "/proto.LoanTransactionService/ApplyFee"
	LoanTransactionService_Detail_FullMethodName           = "/proto.LoanTransactionService/Detail"
	LoanTransactionService_MakeRepayment_FullMethodName    = "/proto.LoanTransactionService/MakeRepayment"
	LoanTransactionService_Adjustment_FullMethodName       = "/proto.LoanTransactionService/Adjustment"
	LoanTransactionService_List_FullMethodName             = "/proto.LoanTransactionService/List"
)

// LoanTransactionServiceClient is the client API for LoanTransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanTransactionServiceClient interface {
	MakeDisbursement(ctx context.Context, in *MakeDisbursementRequest, opts ...grpc.CallOption) (*LoanTransactionResponse, error)
	ApplyFee(ctx context.Context, in *ApplyFeeLoanRequest, opts ...grpc.CallOption) (*LoanTransactionResponse, error)
	Detail(ctx context.Context, in *LoanTransactionDetailRequest, opts ...grpc.CallOption) (*LoanTransactionResponse, error)
	MakeRepayment(ctx context.Context, in *MakeRepaymentRequest, opts ...grpc.CallOption) (*LoanTransactionResponse, error)
	Adjustment(ctx context.Context, in *LoanTransactionAdjustRequest, opts ...grpc.CallOption) (*LoanTransactionResponse, error)
	List(ctx context.Context, in *LoanTransactionListRequest, opts ...grpc.CallOption) (*LoanTransactionListResponse, error)
}

type loanTransactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanTransactionServiceClient(cc grpc.ClientConnInterface) LoanTransactionServiceClient {
	return &loanTransactionServiceClient{cc}
}

func (c *loanTransactionServiceClient) MakeDisbursement(ctx context.Context, in *MakeDisbursementRequest, opts ...grpc.CallOption) (*LoanTransactionResponse, error) {
	out := new(LoanTransactionResponse)
	err := c.cc.Invoke(ctx, LoanTransactionService_MakeDisbursement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionServiceClient) ApplyFee(ctx context.Context, in *ApplyFeeLoanRequest, opts ...grpc.CallOption) (*LoanTransactionResponse, error) {
	out := new(LoanTransactionResponse)
	err := c.cc.Invoke(ctx, LoanTransactionService_ApplyFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionServiceClient) Detail(ctx context.Context, in *LoanTransactionDetailRequest, opts ...grpc.CallOption) (*LoanTransactionResponse, error) {
	out := new(LoanTransactionResponse)
	err := c.cc.Invoke(ctx, LoanTransactionService_Detail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionServiceClient) MakeRepayment(ctx context.Context, in *MakeRepaymentRequest, opts ...grpc.CallOption) (*LoanTransactionResponse, error) {
	out := new(LoanTransactionResponse)
	err := c.cc.Invoke(ctx, LoanTransactionService_MakeRepayment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionServiceClient) Adjustment(ctx context.Context, in *LoanTransactionAdjustRequest, opts ...grpc.CallOption) (*LoanTransactionResponse, error) {
	out := new(LoanTransactionResponse)
	err := c.cc.Invoke(ctx, LoanTransactionService_Adjustment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanTransactionServiceClient) List(ctx context.Context, in *LoanTransactionListRequest, opts ...grpc.CallOption) (*LoanTransactionListResponse, error) {
	out := new(LoanTransactionListResponse)
	err := c.cc.Invoke(ctx, LoanTransactionService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanTransactionServiceServer is the server API for LoanTransactionService service.
// All implementations should embed UnimplementedLoanTransactionServiceServer
// for forward compatibility
type LoanTransactionServiceServer interface {
	MakeDisbursement(context.Context, *MakeDisbursementRequest) (*LoanTransactionResponse, error)
	ApplyFee(context.Context, *ApplyFeeLoanRequest) (*LoanTransactionResponse, error)
	Detail(context.Context, *LoanTransactionDetailRequest) (*LoanTransactionResponse, error)
	MakeRepayment(context.Context, *MakeRepaymentRequest) (*LoanTransactionResponse, error)
	Adjustment(context.Context, *LoanTransactionAdjustRequest) (*LoanTransactionResponse, error)
	List(context.Context, *LoanTransactionListRequest) (*LoanTransactionListResponse, error)
}

// UnimplementedLoanTransactionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLoanTransactionServiceServer struct {
}

func (UnimplementedLoanTransactionServiceServer) MakeDisbursement(context.Context, *MakeDisbursementRequest) (*LoanTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDisbursement not implemented")
}
func (UnimplementedLoanTransactionServiceServer) ApplyFee(context.Context, *ApplyFeeLoanRequest) (*LoanTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFee not implemented")
}
func (UnimplementedLoanTransactionServiceServer) Detail(context.Context, *LoanTransactionDetailRequest) (*LoanTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedLoanTransactionServiceServer) MakeRepayment(context.Context, *MakeRepaymentRequest) (*LoanTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeRepayment not implemented")
}
func (UnimplementedLoanTransactionServiceServer) Adjustment(context.Context, *LoanTransactionAdjustRequest) (*LoanTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Adjustment not implemented")
}
func (UnimplementedLoanTransactionServiceServer) List(context.Context, *LoanTransactionListRequest) (*LoanTransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeLoanTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanTransactionServiceServer will
// result in compilation errors.
type UnsafeLoanTransactionServiceServer interface {
	mustEmbedUnimplementedLoanTransactionServiceServer()
}

func RegisterLoanTransactionServiceServer(s grpc.ServiceRegistrar, srv LoanTransactionServiceServer) {
	s.RegisterService(&LoanTransactionService_ServiceDesc, srv)
}

func _LoanTransactionService_MakeDisbursement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeDisbursementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionServiceServer).MakeDisbursement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanTransactionService_MakeDisbursement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionServiceServer).MakeDisbursement(ctx, req.(*MakeDisbursementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionService_ApplyFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyFeeLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionServiceServer).ApplyFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanTransactionService_ApplyFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionServiceServer).ApplyFee(ctx, req.(*ApplyFeeLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionService_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanTransactionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionServiceServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanTransactionService_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionServiceServer).Detail(ctx, req.(*LoanTransactionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionService_MakeRepayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeRepaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionServiceServer).MakeRepayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanTransactionService_MakeRepayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionServiceServer).MakeRepayment(ctx, req.(*MakeRepaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionService_Adjustment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanTransactionAdjustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionServiceServer).Adjustment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanTransactionService_Adjustment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionServiceServer).Adjustment(ctx, req.(*LoanTransactionAdjustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanTransactionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanTransactionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanTransactionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanTransactionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanTransactionServiceServer).List(ctx, req.(*LoanTransactionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanTransactionService_ServiceDesc is the grpc.ServiceDesc for LoanTransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanTransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoanTransactionService",
	HandlerType: (*LoanTransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeDisbursement",
			Handler:    _LoanTransactionService_MakeDisbursement_Handler,
		},
		{
			MethodName: "ApplyFee",
			Handler:    _LoanTransactionService_ApplyFee_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _LoanTransactionService_Detail_Handler,
		},
		{
			MethodName: "MakeRepayment",
			Handler:    _LoanTransactionService_MakeRepayment_Handler,
		},
		{
			MethodName: "Adjustment",
			Handler:    _LoanTransactionService_Adjustment_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LoanTransactionService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan_service.proto",
}

const (
	LoanProductService_LoanProductDetail_FullMethodName = "/proto.LoanProductService/LoanProductDetail"
	LoanProductService_LoanProductUpdate_FullMethodName = "/proto.LoanProductService/LoanProductUpdate"
	LoanProductService_LoanProductCreate_FullMethodName = "/proto.LoanProductService/LoanProductCreate"
)

// LoanProductServiceClient is the client API for LoanProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanProductServiceClient interface {
	LoanProductDetail(ctx context.Context, in *LoanProductDetailRequest, opts ...grpc.CallOption) (*LoanProductResponse, error)
	LoanProductUpdate(ctx context.Context, in *LoanProductRequest, opts ...grpc.CallOption) (*LoanProductResponse, error)
	LoanProductCreate(ctx context.Context, in *LoanProductRequest, opts ...grpc.CallOption) (*LoanProductResponse, error)
}

type loanProductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanProductServiceClient(cc grpc.ClientConnInterface) LoanProductServiceClient {
	return &loanProductServiceClient{cc}
}

func (c *loanProductServiceClient) LoanProductDetail(ctx context.Context, in *LoanProductDetailRequest, opts ...grpc.CallOption) (*LoanProductResponse, error) {
	out := new(LoanProductResponse)
	err := c.cc.Invoke(ctx, LoanProductService_LoanProductDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductServiceClient) LoanProductUpdate(ctx context.Context, in *LoanProductRequest, opts ...grpc.CallOption) (*LoanProductResponse, error) {
	out := new(LoanProductResponse)
	err := c.cc.Invoke(ctx, LoanProductService_LoanProductUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductServiceClient) LoanProductCreate(ctx context.Context, in *LoanProductRequest, opts ...grpc.CallOption) (*LoanProductResponse, error) {
	out := new(LoanProductResponse)
	err := c.cc.Invoke(ctx, LoanProductService_LoanProductCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanProductServiceServer is the server API for LoanProductService service.
// All implementations should embed UnimplementedLoanProductServiceServer
// for forward compatibility
type LoanProductServiceServer interface {
	LoanProductDetail(context.Context, *LoanProductDetailRequest) (*LoanProductResponse, error)
	LoanProductUpdate(context.Context, *LoanProductRequest) (*LoanProductResponse, error)
	LoanProductCreate(context.Context, *LoanProductRequest) (*LoanProductResponse, error)
}

// UnimplementedLoanProductServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLoanProductServiceServer struct {
}

func (UnimplementedLoanProductServiceServer) LoanProductDetail(context.Context, *LoanProductDetailRequest) (*LoanProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanProductDetail not implemented")
}
func (UnimplementedLoanProductServiceServer) LoanProductUpdate(context.Context, *LoanProductRequest) (*LoanProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanProductUpdate not implemented")
}
func (UnimplementedLoanProductServiceServer) LoanProductCreate(context.Context, *LoanProductRequest) (*LoanProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoanProductCreate not implemented")
}

// UnsafeLoanProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanProductServiceServer will
// result in compilation errors.
type UnsafeLoanProductServiceServer interface {
	mustEmbedUnimplementedLoanProductServiceServer()
}

func RegisterLoanProductServiceServer(s grpc.ServiceRegistrar, srv LoanProductServiceServer) {
	s.RegisterService(&LoanProductService_ServiceDesc, srv)
}

func _LoanProductService_LoanProductDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanProductDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductServiceServer).LoanProductDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanProductService_LoanProductDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductServiceServer).LoanProductDetail(ctx, req.(*LoanProductDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductService_LoanProductUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductServiceServer).LoanProductUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanProductService_LoanProductUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductServiceServer).LoanProductUpdate(ctx, req.(*LoanProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductService_LoanProductCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoanProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductServiceServer).LoanProductCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanProductService_LoanProductCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductServiceServer).LoanProductCreate(ctx, req.(*LoanProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanProductService_ServiceDesc is the grpc.ServiceDesc for LoanProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LoanProductService",
	HandlerType: (*LoanProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoanProductDetail",
			Handler:    _LoanProductService_LoanProductDetail_Handler,
		},
		{
			MethodName: "LoanProductUpdate",
			Handler:    _LoanProductService_LoanProductUpdate_Handler,
		},
		{
			MethodName: "LoanProductCreate",
			Handler:    _LoanProductService_LoanProductCreate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan_service.proto",
}
