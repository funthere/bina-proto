// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: transaction_channel_service.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransactionChannelService_TransactionChannelDetail_FullMethodName = "/proto.TransactionChannelService/TransactionChannelDetail"
)

// TransactionChannelServiceClient is the client API for TransactionChannelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionChannelServiceClient interface {
	TransactionChannelDetail(ctx context.Context, in *TransactionChannelDetailRequest, opts ...grpc.CallOption) (*TransactionChannelResponse, error)
}

type transactionChannelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionChannelServiceClient(cc grpc.ClientConnInterface) TransactionChannelServiceClient {
	return &transactionChannelServiceClient{cc}
}

func (c *transactionChannelServiceClient) TransactionChannelDetail(ctx context.Context, in *TransactionChannelDetailRequest, opts ...grpc.CallOption) (*TransactionChannelResponse, error) {
	out := new(TransactionChannelResponse)
	err := c.cc.Invoke(ctx, TransactionChannelService_TransactionChannelDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionChannelServiceServer is the server API for TransactionChannelService service.
// All implementations should embed UnimplementedTransactionChannelServiceServer
// for forward compatibility
type TransactionChannelServiceServer interface {
	TransactionChannelDetail(context.Context, *TransactionChannelDetailRequest) (*TransactionChannelResponse, error)
}

// UnimplementedTransactionChannelServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTransactionChannelServiceServer struct {
}

func (UnimplementedTransactionChannelServiceServer) TransactionChannelDetail(context.Context, *TransactionChannelDetailRequest) (*TransactionChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransactionChannelDetail not implemented")
}

// UnsafeTransactionChannelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionChannelServiceServer will
// result in compilation errors.
type UnsafeTransactionChannelServiceServer interface {
	mustEmbedUnimplementedTransactionChannelServiceServer()
}

func RegisterTransactionChannelServiceServer(s grpc.ServiceRegistrar, srv TransactionChannelServiceServer) {
	s.RegisterService(&TransactionChannelService_ServiceDesc, srv)
}

func _TransactionChannelService_TransactionChannelDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionChannelDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionChannelServiceServer).TransactionChannelDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionChannelService_TransactionChannelDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionChannelServiceServer).TransactionChannelDetail(ctx, req.(*TransactionChannelDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionChannelService_ServiceDesc is the grpc.ServiceDesc for TransactionChannelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionChannelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TransactionChannelService",
	HandlerType: (*TransactionChannelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransactionChannelDetail",
			Handler:    _TransactionChannelService_TransactionChannelDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction_channel_service.proto",
}
