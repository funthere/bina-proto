// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: loan_account_service.proto

package golang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LoanAccountService_CreateLoanAccount_FullMethodName    = "/protobuf.los.LoanAccountService/CreateLoanAccount"
	LoanAccountService_GetLoanAccountDetail_FullMethodName = "/protobuf.los.LoanAccountService/GetLoanAccountDetail"
	LoanAccountService_GetLoanPreview_FullMethodName       = "/protobuf.los.LoanAccountService/GetLoanPreview"
)

// LoanAccountServiceClient is the client API for LoanAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanAccountServiceClient interface {
	CreateLoanAccount(ctx context.Context, in *ReqLoanAccount, opts ...grpc.CallOption) (*ResCreateLoanAccount, error)
	GetLoanAccountDetail(ctx context.Context, in *ReqGetLoanAccount, opts ...grpc.CallOption) (*ResGetLoanAccount, error)
	GetLoanPreview(ctx context.Context, in *ReqLoanPreview, opts ...grpc.CallOption) (*ResLoanPreview, error)
}

type loanAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanAccountServiceClient(cc grpc.ClientConnInterface) LoanAccountServiceClient {
	return &loanAccountServiceClient{cc}
}

func (c *loanAccountServiceClient) CreateLoanAccount(ctx context.Context, in *ReqLoanAccount, opts ...grpc.CallOption) (*ResCreateLoanAccount, error) {
	out := new(ResCreateLoanAccount)
	err := c.cc.Invoke(ctx, LoanAccountService_CreateLoanAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAccountServiceClient) GetLoanAccountDetail(ctx context.Context, in *ReqGetLoanAccount, opts ...grpc.CallOption) (*ResGetLoanAccount, error) {
	out := new(ResGetLoanAccount)
	err := c.cc.Invoke(ctx, LoanAccountService_GetLoanAccountDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAccountServiceClient) GetLoanPreview(ctx context.Context, in *ReqLoanPreview, opts ...grpc.CallOption) (*ResLoanPreview, error) {
	out := new(ResLoanPreview)
	err := c.cc.Invoke(ctx, LoanAccountService_GetLoanPreview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanAccountServiceServer is the server API for LoanAccountService service.
// All implementations should embed UnimplementedLoanAccountServiceServer
// for forward compatibility
type LoanAccountServiceServer interface {
	CreateLoanAccount(context.Context, *ReqLoanAccount) (*ResCreateLoanAccount, error)
	GetLoanAccountDetail(context.Context, *ReqGetLoanAccount) (*ResGetLoanAccount, error)
	GetLoanPreview(context.Context, *ReqLoanPreview) (*ResLoanPreview, error)
}

// UnimplementedLoanAccountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLoanAccountServiceServer struct {
}

func (UnimplementedLoanAccountServiceServer) CreateLoanAccount(context.Context, *ReqLoanAccount) (*ResCreateLoanAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoanAccount not implemented")
}
func (UnimplementedLoanAccountServiceServer) GetLoanAccountDetail(context.Context, *ReqGetLoanAccount) (*ResGetLoanAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanAccountDetail not implemented")
}
func (UnimplementedLoanAccountServiceServer) GetLoanPreview(context.Context, *ReqLoanPreview) (*ResLoanPreview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanPreview not implemented")
}

// UnsafeLoanAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanAccountServiceServer will
// result in compilation errors.
type UnsafeLoanAccountServiceServer interface {
	mustEmbedUnimplementedLoanAccountServiceServer()
}

func RegisterLoanAccountServiceServer(s grpc.ServiceRegistrar, srv LoanAccountServiceServer) {
	s.RegisterService(&LoanAccountService_ServiceDesc, srv)
}

func _LoanAccountService_CreateLoanAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLoanAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAccountServiceServer).CreateLoanAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAccountService_CreateLoanAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAccountServiceServer).CreateLoanAccount(ctx, req.(*ReqLoanAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAccountService_GetLoanAccountDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetLoanAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAccountServiceServer).GetLoanAccountDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAccountService_GetLoanAccountDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAccountServiceServer).GetLoanAccountDetail(ctx, req.(*ReqGetLoanAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAccountService_GetLoanPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLoanPreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAccountServiceServer).GetLoanPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAccountService_GetLoanPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAccountServiceServer).GetLoanPreview(ctx, req.(*ReqLoanPreview))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanAccountService_ServiceDesc is the grpc.ServiceDesc for LoanAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.los.LoanAccountService",
	HandlerType: (*LoanAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoanAccount",
			Handler:    _LoanAccountService_CreateLoanAccount_Handler,
		},
		{
			MethodName: "GetLoanAccountDetail",
			Handler:    _LoanAccountService_GetLoanAccountDetail_Handler,
		},
		{
			MethodName: "GetLoanPreview",
			Handler:    _LoanAccountService_GetLoanPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan_account_service.proto",
}
