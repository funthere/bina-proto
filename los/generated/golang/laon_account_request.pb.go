// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: laon_account_request.proto

package golang

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReqLoanAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceiptDate                     string             `protobuf:"bytes,1,opt,name=receiptDate,proto3" json:"receiptDate,omitempty"`
	ApplicationNumber               string             `protobuf:"bytes,2,opt,name=applicationNumber,proto3" json:"applicationNumber,omitempty"`
	Branch                          string             `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	Program                         string             `protobuf:"bytes,4,opt,name=program,proto3" json:"program,omitempty"`
	ProductType                     string             `protobuf:"bytes,5,opt,name=productType,proto3" json:"productType,omitempty"`
	OriginalLoanDate                string             `protobuf:"bytes,6,opt,name=originalLoanDate,proto3" json:"originalLoanDate,omitempty"`
	AccountNumber                   string             `protobuf:"bytes,7,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	CustomerIdentityNumber          string             `protobuf:"bytes,8,opt,name=customerIdentityNumber,proto3" json:"customerIdentityNumber,omitempty"`
	LoanAmount                      float64            `protobuf:"fixed64,9,opt,name=loanAmount,proto3" json:"loanAmount,omitempty"`
	LoanTenure                      uint32             `protobuf:"varint,10,opt,name=loanTenure,proto3" json:"loanTenure,omitempty"`
	DownPayment                     float64            `protobuf:"fixed64,11,opt,name=downPayment,proto3" json:"downPayment,omitempty"`
	InterestSettings                []*InterestSetting `protobuf:"bytes,12,rep,name=interestSettings,proto3" json:"interestSettings,omitempty"`
	HousingName                     string             `protobuf:"bytes,13,opt,name=housingName,proto3" json:"housingName,omitempty"`
	DeveloperName                   string             `protobuf:"bytes,14,opt,name=developerName,proto3" json:"developerName,omitempty"`
	DeveloperGroupName              string             `protobuf:"bytes,15,opt,name=developerGroupName,proto3" json:"developerGroupName,omitempty"`
	CollateralType                  string             `protobuf:"bytes,16,opt,name=collateralType,proto3" json:"collateralType,omitempty"`
	CollateralStatus                string             `protobuf:"bytes,17,opt,name=collateralStatus,proto3" json:"collateralStatus,omitempty"`
	CollateralAddress               string             `protobuf:"bytes,18,opt,name=collateralAddress,proto3" json:"collateralAddress,omitempty"`
	CollateralRt                    string             `protobuf:"bytes,19,opt,name=collateralRt,proto3" json:"collateralRt,omitempty"`
	CollateralRw                    string             `protobuf:"bytes,20,opt,name=collateralRw,proto3" json:"collateralRw,omitempty"`
	CollateralSubdistrict           string             `protobuf:"bytes,21,opt,name=collateralSubdistrict,proto3" json:"collateralSubdistrict,omitempty"`
	CollateralDistrict              string             `protobuf:"bytes,22,opt,name=collateralDistrict,proto3" json:"collateralDistrict,omitempty"`
	CollateralCity                  string             `protobuf:"bytes,23,opt,name=collateralCity,proto3" json:"collateralCity,omitempty"`
	CollateralProvince              string             `protobuf:"bytes,24,opt,name=collateralProvince,proto3" json:"collateralProvince,omitempty"`
	CollateralZipCode               string             `protobuf:"bytes,25,opt,name=collateralZipCode,proto3" json:"collateralZipCode,omitempty"`
	CollateralCertificateExpiryDate string             `protobuf:"bytes,26,opt,name=collateralCertificateExpiryDate,proto3" json:"collateralCertificateExpiryDate,omitempty"`
	CollateralGroundArea            uint32             `protobuf:"varint,27,opt,name=collateralGroundArea,proto3" json:"collateralGroundArea,omitempty"`
	CollateralBuildingArea          uint32             `protobuf:"varint,28,opt,name=collateralBuildingArea,proto3" json:"collateralBuildingArea,omitempty"`
	CollateralValue                 float64            `protobuf:"fixed64,29,opt,name=collateralValue,proto3" json:"collateralValue,omitempty"`
	BuyingPurpose                   string             `protobuf:"bytes,30,opt,name=buyingPurpose,proto3" json:"buyingPurpose,omitempty"`
	BuyingPrice                     float64            `protobuf:"fixed64,31,opt,name=buyingPrice,proto3" json:"buyingPrice,omitempty"`
	InsuranceLifeCompany            string             `protobuf:"bytes,32,opt,name=insuranceLifeCompany,proto3" json:"insuranceLifeCompany,omitempty"`
	InsuranceLifePolicyNumber       string             `protobuf:"bytes,33,opt,name=insuranceLifePolicyNumber,proto3" json:"insuranceLifePolicyNumber,omitempty"`
	InsuranceLifePolicyStartDate    string             `protobuf:"bytes,34,opt,name=insuranceLifePolicyStartDate,proto3" json:"insuranceLifePolicyStartDate,omitempty"`
	InsuranceLifePolicyEndDate      string             `protobuf:"bytes,35,opt,name=insuranceLifePolicyEndDate,proto3" json:"insuranceLifePolicyEndDate,omitempty"`
	InsuranceLifePolicyAmount       float64            `protobuf:"fixed64,36,opt,name=insuranceLifePolicyAmount,proto3" json:"insuranceLifePolicyAmount,omitempty"`
	InsuranceFireCompany            string             `protobuf:"bytes,37,opt,name=insuranceFireCompany,proto3" json:"insuranceFireCompany,omitempty"`
	InsuranceFirePolicyNumber       string             `protobuf:"bytes,38,opt,name=insuranceFirePolicyNumber,proto3" json:"insuranceFirePolicyNumber,omitempty"`
	InsuranceFirePolicyStartDate    string             `protobuf:"bytes,39,opt,name=insuranceFirePolicyStartDate,proto3" json:"insuranceFirePolicyStartDate,omitempty"`
	InsuranceFirePolicyEndDate      string             `protobuf:"bytes,40,opt,name=insuranceFirePolicyEndDate,proto3" json:"insuranceFirePolicyEndDate,omitempty"`
	InsuranceFirePolicyAmount       float64            `protobuf:"fixed64,41,opt,name=insuranceFirePolicyAmount,proto3" json:"insuranceFirePolicyAmount,omitempty"`
	Name                            string             `protobuf:"bytes,42,opt,name=name,proto3" json:"name,omitempty"`
	Ktp                             string             `protobuf:"bytes,43,opt,name=ktp,proto3" json:"ktp,omitempty"`
	BirthPlace                      string             `protobuf:"bytes,44,opt,name=birthPlace,proto3" json:"birthPlace,omitempty"`
	BirthDate                       string             `protobuf:"bytes,45,opt,name=birthDate,proto3" json:"birthDate,omitempty"`
	Npwp                            string             `protobuf:"bytes,46,opt,name=npwp,proto3" json:"npwp,omitempty"`
	Nationality                     string             `protobuf:"bytes,47,opt,name=nationality,proto3" json:"nationality,omitempty"`
	MaritalStatus                   string             `protobuf:"bytes,48,opt,name=maritalStatus,proto3" json:"maritalStatus,omitempty"`
	Gender                          string             `protobuf:"bytes,49,opt,name=gender,proto3" json:"gender,omitempty"`
	IncomeSource                    string             `protobuf:"bytes,50,opt,name=incomeSource,proto3" json:"incomeSource,omitempty"`
	SeparateAssets                  bool               `protobuf:"varint,51,opt,name=separateAssets,proto3" json:"separateAssets,omitempty"`
	KtpAddress                      string             `protobuf:"bytes,52,opt,name=ktpAddress,proto3" json:"ktpAddress,omitempty"`
	HomeAddress                     string             `protobuf:"bytes,53,opt,name=homeAddress,proto3" json:"homeAddress,omitempty"`
	Rt                              string             `protobuf:"bytes,54,opt,name=rt,proto3" json:"rt,omitempty"`
	Rw                              string             `protobuf:"bytes,55,opt,name=rw,proto3" json:"rw,omitempty"`
	Subdistrict                     string             `protobuf:"bytes,56,opt,name=subdistrict,proto3" json:"subdistrict,omitempty"`
	District                        string             `protobuf:"bytes,57,opt,name=district,proto3" json:"district,omitempty"`
	City                            string             `protobuf:"bytes,58,opt,name=city,proto3" json:"city,omitempty"`
	Province                        string             `protobuf:"bytes,59,opt,name=province,proto3" json:"province,omitempty"`
	ZipCode                         string             `protobuf:"bytes,60,opt,name=zipCode,proto3" json:"zipCode,omitempty"`
	HouseStatus                     string             `protobuf:"bytes,61,opt,name=houseStatus,proto3" json:"houseStatus,omitempty"`
	HomePhone                       string             `protobuf:"bytes,62,opt,name=homePhone,proto3" json:"homePhone,omitempty"`
	MobilePhone_1                   string             `protobuf:"bytes,63,opt,name=mobilePhone_1,json=mobilePhone1,proto3" json:"mobilePhone_1,omitempty"`
	MobilePhone_2                   string             `protobuf:"bytes,64,opt,name=mobilePhone_2,json=mobilePhone2,proto3" json:"mobilePhone_2,omitempty"`
	Email                           string             `protobuf:"bytes,65,opt,name=email,proto3" json:"email,omitempty"`
	HavingAGuarantor                bool               `protobuf:"varint,66,opt,name=havingAGuarantor,proto3" json:"havingAGuarantor,omitempty"`
	Religion                        string             `protobuf:"bytes,67,opt,name=religion,proto3" json:"religion,omitempty"`
	MotherName                      string             `protobuf:"bytes,68,opt,name=motherName,proto3" json:"motherName,omitempty"`
	Education                       string             `protobuf:"bytes,69,opt,name=education,proto3" json:"education,omitempty"`
	Job                             string             `protobuf:"bytes,70,opt,name=job,proto3" json:"job,omitempty"`
	JobPosition                     string             `protobuf:"bytes,71,opt,name=jobPosition,proto3" json:"jobPosition,omitempty"`
	JobStatus                       string             `protobuf:"bytes,72,opt,name=jobStatus,proto3" json:"jobStatus,omitempty"`
	YearsOfService                  uint32             `protobuf:"varint,73,opt,name=yearsOfService,proto3" json:"yearsOfService,omitempty"`
	PositionCategory                string             `protobuf:"bytes,74,opt,name=positionCategory,proto3" json:"positionCategory,omitempty"`
	CompanyName                     string             `protobuf:"bytes,75,opt,name=companyName,proto3" json:"companyName,omitempty"`
	CompanyAddress                  string             `protobuf:"bytes,76,opt,name=companyAddress,proto3" json:"companyAddress,omitempty"`
	CompanyRt                       string             `protobuf:"bytes,77,opt,name=companyRt,proto3" json:"companyRt,omitempty"`
	CompanyRw                       string             `protobuf:"bytes,78,opt,name=companyRw,proto3" json:"companyRw,omitempty"`
	CompanySubdistrict              string             `protobuf:"bytes,79,opt,name=companySubdistrict,proto3" json:"companySubdistrict,omitempty"`
	CompanyDistrict                 string             `protobuf:"bytes,80,opt,name=companyDistrict,proto3" json:"companyDistrict,omitempty"`
	CompanyCity                     string             `protobuf:"bytes,81,opt,name=companyCity,proto3" json:"companyCity,omitempty"`
	CompanyProvince                 string             `protobuf:"bytes,82,opt,name=companyProvince,proto3" json:"companyProvince,omitempty"`
	CompanyZipCode                  string             `protobuf:"bytes,83,opt,name=companyZipCode,proto3" json:"companyZipCode,omitempty"`
	CompanyPhone                    string             `protobuf:"bytes,84,opt,name=companyPhone,proto3" json:"companyPhone,omitempty"`
	SpouseName                      string             `protobuf:"bytes,85,opt,name=spouseName,proto3" json:"spouseName,omitempty"`
	SpouseKtp                       string             `protobuf:"bytes,86,opt,name=spouseKtp,proto3" json:"spouseKtp,omitempty"`
	SpouseBirthPlace                string             `protobuf:"bytes,87,opt,name=spouseBirthPlace,proto3" json:"spouseBirthPlace,omitempty"`
	SpouseBirthDate                 string             `protobuf:"bytes,88,opt,name=spouseBirthDate,proto3" json:"spouseBirthDate,omitempty"`
	SpouseNpwp                      string             `protobuf:"bytes,89,opt,name=spouseNpwp,proto3" json:"spouseNpwp,omitempty"`
	SpouseGender                    string             `protobuf:"bytes,90,opt,name=spouseGender,proto3" json:"spouseGender,omitempty"`
	SpouseNationality               string             `protobuf:"bytes,91,opt,name=spouseNationality,proto3" json:"spouseNationality,omitempty"`
	SpouseEducation                 string             `protobuf:"bytes,92,opt,name=spouseEducation,proto3" json:"spouseEducation,omitempty"`
	SpouseMaritalStatus             string             `protobuf:"bytes,93,opt,name=spouseMaritalStatus,proto3" json:"spouseMaritalStatus,omitempty"`
	Relationship                    string             `protobuf:"bytes,94,opt,name=relationship,proto3" json:"relationship,omitempty"`
	SpouseAddress                   string             `protobuf:"bytes,95,opt,name=spouseAddress,proto3" json:"spouseAddress,omitempty"`
	SpouseRt                        string             `protobuf:"bytes,96,opt,name=spouseRt,proto3" json:"spouseRt,omitempty"`
	SpouseRw                        string             `protobuf:"bytes,97,opt,name=spouseRw,proto3" json:"spouseRw,omitempty"`
	SpouseSubdistrict               string             `protobuf:"bytes,98,opt,name=spouseSubdistrict,proto3" json:"spouseSubdistrict,omitempty"`
	SpouseDistrict                  string             `protobuf:"bytes,99,opt,name=spouseDistrict,proto3" json:"spouseDistrict,omitempty"`
	SpouseCity                      string             `protobuf:"bytes,100,opt,name=spouseCity,proto3" json:"spouseCity,omitempty"`
	SpouseProvince                  string             `protobuf:"bytes,101,opt,name=spouseProvince,proto3" json:"spouseProvince,omitempty"`
	SpouseZipCode                   string             `protobuf:"bytes,102,opt,name=spouseZipCode,proto3" json:"spouseZipCode,omitempty"`
	SpouseHomeStatus                string             `protobuf:"bytes,103,opt,name=spouseHomeStatus,proto3" json:"spouseHomeStatus,omitempty"`
	SpouseHomePhone                 string             `protobuf:"bytes,104,opt,name=spouseHomePhone,proto3" json:"spouseHomePhone,omitempty"`
	SpouseMobilePhone_1             string             `protobuf:"bytes,105,opt,name=spouseMobilePhone_1,json=spouseMobilePhone1,proto3" json:"spouseMobilePhone_1,omitempty"`
	SpouseMobilePhone_2             string             `protobuf:"bytes,106,opt,name=spouseMobilePhone_2,json=spouseMobilePhone2,proto3" json:"spouseMobilePhone_2,omitempty"`
	SpouseEmail                     string             `protobuf:"bytes,107,opt,name=spouseEmail,proto3" json:"spouseEmail,omitempty"`
}

func (x *ReqLoanAccount) Reset() {
	*x = ReqLoanAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laon_account_request_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLoanAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLoanAccount) ProtoMessage() {}

func (x *ReqLoanAccount) ProtoReflect() protoreflect.Message {
	mi := &file_laon_account_request_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLoanAccount.ProtoReflect.Descriptor instead.
func (*ReqLoanAccount) Descriptor() ([]byte, []int) {
	return file_laon_account_request_proto_rawDescGZIP(), []int{0}
}

func (x *ReqLoanAccount) GetReceiptDate() string {
	if x != nil {
		return x.ReceiptDate
	}
	return ""
}

func (x *ReqLoanAccount) GetApplicationNumber() string {
	if x != nil {
		return x.ApplicationNumber
	}
	return ""
}

func (x *ReqLoanAccount) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ReqLoanAccount) GetProgram() string {
	if x != nil {
		return x.Program
	}
	return ""
}

func (x *ReqLoanAccount) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *ReqLoanAccount) GetOriginalLoanDate() string {
	if x != nil {
		return x.OriginalLoanDate
	}
	return ""
}

func (x *ReqLoanAccount) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *ReqLoanAccount) GetCustomerIdentityNumber() string {
	if x != nil {
		return x.CustomerIdentityNumber
	}
	return ""
}

func (x *ReqLoanAccount) GetLoanAmount() float64 {
	if x != nil {
		return x.LoanAmount
	}
	return 0
}

func (x *ReqLoanAccount) GetLoanTenure() uint32 {
	if x != nil {
		return x.LoanTenure
	}
	return 0
}

func (x *ReqLoanAccount) GetDownPayment() float64 {
	if x != nil {
		return x.DownPayment
	}
	return 0
}

func (x *ReqLoanAccount) GetInterestSettings() []*InterestSetting {
	if x != nil {
		return x.InterestSettings
	}
	return nil
}

func (x *ReqLoanAccount) GetHousingName() string {
	if x != nil {
		return x.HousingName
	}
	return ""
}

func (x *ReqLoanAccount) GetDeveloperName() string {
	if x != nil {
		return x.DeveloperName
	}
	return ""
}

func (x *ReqLoanAccount) GetDeveloperGroupName() string {
	if x != nil {
		return x.DeveloperGroupName
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralType() string {
	if x != nil {
		return x.CollateralType
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralStatus() string {
	if x != nil {
		return x.CollateralStatus
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralAddress() string {
	if x != nil {
		return x.CollateralAddress
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralRt() string {
	if x != nil {
		return x.CollateralRt
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralRw() string {
	if x != nil {
		return x.CollateralRw
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralSubdistrict() string {
	if x != nil {
		return x.CollateralSubdistrict
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralDistrict() string {
	if x != nil {
		return x.CollateralDistrict
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralCity() string {
	if x != nil {
		return x.CollateralCity
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralProvince() string {
	if x != nil {
		return x.CollateralProvince
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralZipCode() string {
	if x != nil {
		return x.CollateralZipCode
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralCertificateExpiryDate() string {
	if x != nil {
		return x.CollateralCertificateExpiryDate
	}
	return ""
}

func (x *ReqLoanAccount) GetCollateralGroundArea() uint32 {
	if x != nil {
		return x.CollateralGroundArea
	}
	return 0
}

func (x *ReqLoanAccount) GetCollateralBuildingArea() uint32 {
	if x != nil {
		return x.CollateralBuildingArea
	}
	return 0
}

func (x *ReqLoanAccount) GetCollateralValue() float64 {
	if x != nil {
		return x.CollateralValue
	}
	return 0
}

func (x *ReqLoanAccount) GetBuyingPurpose() string {
	if x != nil {
		return x.BuyingPurpose
	}
	return ""
}

func (x *ReqLoanAccount) GetBuyingPrice() float64 {
	if x != nil {
		return x.BuyingPrice
	}
	return 0
}

func (x *ReqLoanAccount) GetInsuranceLifeCompany() string {
	if x != nil {
		return x.InsuranceLifeCompany
	}
	return ""
}

func (x *ReqLoanAccount) GetInsuranceLifePolicyNumber() string {
	if x != nil {
		return x.InsuranceLifePolicyNumber
	}
	return ""
}

func (x *ReqLoanAccount) GetInsuranceLifePolicyStartDate() string {
	if x != nil {
		return x.InsuranceLifePolicyStartDate
	}
	return ""
}

func (x *ReqLoanAccount) GetInsuranceLifePolicyEndDate() string {
	if x != nil {
		return x.InsuranceLifePolicyEndDate
	}
	return ""
}

func (x *ReqLoanAccount) GetInsuranceLifePolicyAmount() float64 {
	if x != nil {
		return x.InsuranceLifePolicyAmount
	}
	return 0
}

func (x *ReqLoanAccount) GetInsuranceFireCompany() string {
	if x != nil {
		return x.InsuranceFireCompany
	}
	return ""
}

func (x *ReqLoanAccount) GetInsuranceFirePolicyNumber() string {
	if x != nil {
		return x.InsuranceFirePolicyNumber
	}
	return ""
}

func (x *ReqLoanAccount) GetInsuranceFirePolicyStartDate() string {
	if x != nil {
		return x.InsuranceFirePolicyStartDate
	}
	return ""
}

func (x *ReqLoanAccount) GetInsuranceFirePolicyEndDate() string {
	if x != nil {
		return x.InsuranceFirePolicyEndDate
	}
	return ""
}

func (x *ReqLoanAccount) GetInsuranceFirePolicyAmount() float64 {
	if x != nil {
		return x.InsuranceFirePolicyAmount
	}
	return 0
}

func (x *ReqLoanAccount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqLoanAccount) GetKtp() string {
	if x != nil {
		return x.Ktp
	}
	return ""
}

func (x *ReqLoanAccount) GetBirthPlace() string {
	if x != nil {
		return x.BirthPlace
	}
	return ""
}

func (x *ReqLoanAccount) GetBirthDate() string {
	if x != nil {
		return x.BirthDate
	}
	return ""
}

func (x *ReqLoanAccount) GetNpwp() string {
	if x != nil {
		return x.Npwp
	}
	return ""
}

func (x *ReqLoanAccount) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *ReqLoanAccount) GetMaritalStatus() string {
	if x != nil {
		return x.MaritalStatus
	}
	return ""
}

func (x *ReqLoanAccount) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *ReqLoanAccount) GetIncomeSource() string {
	if x != nil {
		return x.IncomeSource
	}
	return ""
}

func (x *ReqLoanAccount) GetSeparateAssets() bool {
	if x != nil {
		return x.SeparateAssets
	}
	return false
}

func (x *ReqLoanAccount) GetKtpAddress() string {
	if x != nil {
		return x.KtpAddress
	}
	return ""
}

func (x *ReqLoanAccount) GetHomeAddress() string {
	if x != nil {
		return x.HomeAddress
	}
	return ""
}

func (x *ReqLoanAccount) GetRt() string {
	if x != nil {
		return x.Rt
	}
	return ""
}

func (x *ReqLoanAccount) GetRw() string {
	if x != nil {
		return x.Rw
	}
	return ""
}

func (x *ReqLoanAccount) GetSubdistrict() string {
	if x != nil {
		return x.Subdistrict
	}
	return ""
}

func (x *ReqLoanAccount) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *ReqLoanAccount) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ReqLoanAccount) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *ReqLoanAccount) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *ReqLoanAccount) GetHouseStatus() string {
	if x != nil {
		return x.HouseStatus
	}
	return ""
}

func (x *ReqLoanAccount) GetHomePhone() string {
	if x != nil {
		return x.HomePhone
	}
	return ""
}

func (x *ReqLoanAccount) GetMobilePhone_1() string {
	if x != nil {
		return x.MobilePhone_1
	}
	return ""
}

func (x *ReqLoanAccount) GetMobilePhone_2() string {
	if x != nil {
		return x.MobilePhone_2
	}
	return ""
}

func (x *ReqLoanAccount) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ReqLoanAccount) GetHavingAGuarantor() bool {
	if x != nil {
		return x.HavingAGuarantor
	}
	return false
}

func (x *ReqLoanAccount) GetReligion() string {
	if x != nil {
		return x.Religion
	}
	return ""
}

func (x *ReqLoanAccount) GetMotherName() string {
	if x != nil {
		return x.MotherName
	}
	return ""
}

func (x *ReqLoanAccount) GetEducation() string {
	if x != nil {
		return x.Education
	}
	return ""
}

func (x *ReqLoanAccount) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *ReqLoanAccount) GetJobPosition() string {
	if x != nil {
		return x.JobPosition
	}
	return ""
}

func (x *ReqLoanAccount) GetJobStatus() string {
	if x != nil {
		return x.JobStatus
	}
	return ""
}

func (x *ReqLoanAccount) GetYearsOfService() uint32 {
	if x != nil {
		return x.YearsOfService
	}
	return 0
}

func (x *ReqLoanAccount) GetPositionCategory() string {
	if x != nil {
		return x.PositionCategory
	}
	return ""
}

func (x *ReqLoanAccount) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ReqLoanAccount) GetCompanyAddress() string {
	if x != nil {
		return x.CompanyAddress
	}
	return ""
}

func (x *ReqLoanAccount) GetCompanyRt() string {
	if x != nil {
		return x.CompanyRt
	}
	return ""
}

func (x *ReqLoanAccount) GetCompanyRw() string {
	if x != nil {
		return x.CompanyRw
	}
	return ""
}

func (x *ReqLoanAccount) GetCompanySubdistrict() string {
	if x != nil {
		return x.CompanySubdistrict
	}
	return ""
}

func (x *ReqLoanAccount) GetCompanyDistrict() string {
	if x != nil {
		return x.CompanyDistrict
	}
	return ""
}

func (x *ReqLoanAccount) GetCompanyCity() string {
	if x != nil {
		return x.CompanyCity
	}
	return ""
}

func (x *ReqLoanAccount) GetCompanyProvince() string {
	if x != nil {
		return x.CompanyProvince
	}
	return ""
}

func (x *ReqLoanAccount) GetCompanyZipCode() string {
	if x != nil {
		return x.CompanyZipCode
	}
	return ""
}

func (x *ReqLoanAccount) GetCompanyPhone() string {
	if x != nil {
		return x.CompanyPhone
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseName() string {
	if x != nil {
		return x.SpouseName
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseKtp() string {
	if x != nil {
		return x.SpouseKtp
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseBirthPlace() string {
	if x != nil {
		return x.SpouseBirthPlace
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseBirthDate() string {
	if x != nil {
		return x.SpouseBirthDate
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseNpwp() string {
	if x != nil {
		return x.SpouseNpwp
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseGender() string {
	if x != nil {
		return x.SpouseGender
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseNationality() string {
	if x != nil {
		return x.SpouseNationality
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseEducation() string {
	if x != nil {
		return x.SpouseEducation
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseMaritalStatus() string {
	if x != nil {
		return x.SpouseMaritalStatus
	}
	return ""
}

func (x *ReqLoanAccount) GetRelationship() string {
	if x != nil {
		return x.Relationship
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseAddress() string {
	if x != nil {
		return x.SpouseAddress
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseRt() string {
	if x != nil {
		return x.SpouseRt
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseRw() string {
	if x != nil {
		return x.SpouseRw
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseSubdistrict() string {
	if x != nil {
		return x.SpouseSubdistrict
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseDistrict() string {
	if x != nil {
		return x.SpouseDistrict
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseCity() string {
	if x != nil {
		return x.SpouseCity
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseProvince() string {
	if x != nil {
		return x.SpouseProvince
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseZipCode() string {
	if x != nil {
		return x.SpouseZipCode
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseHomeStatus() string {
	if x != nil {
		return x.SpouseHomeStatus
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseHomePhone() string {
	if x != nil {
		return x.SpouseHomePhone
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseMobilePhone_1() string {
	if x != nil {
		return x.SpouseMobilePhone_1
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseMobilePhone_2() string {
	if x != nil {
		return x.SpouseMobilePhone_2
	}
	return ""
}

func (x *ReqLoanAccount) GetSpouseEmail() string {
	if x != nil {
		return x.SpouseEmail
	}
	return ""
}

type ReqGetLoanAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoanId string `protobuf:"bytes,1,opt,name=loanId,proto3" json:"loanId,omitempty"`
}

func (x *ReqGetLoanAccount) Reset() {
	*x = ReqGetLoanAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laon_account_request_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqGetLoanAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqGetLoanAccount) ProtoMessage() {}

func (x *ReqGetLoanAccount) ProtoReflect() protoreflect.Message {
	mi := &file_laon_account_request_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqGetLoanAccount.ProtoReflect.Descriptor instead.
func (*ReqGetLoanAccount) Descriptor() ([]byte, []int) {
	return file_laon_account_request_proto_rawDescGZIP(), []int{1}
}

func (x *ReqGetLoanAccount) GetLoanId() string {
	if x != nil {
		return x.LoanId
	}
	return ""
}

type ReqLoanPreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterestRate     float64 `protobuf:"fixed64,1,opt,name=interestRate,proto3" json:"interestRate,omitempty"`
	LoanAmount       float64 `protobuf:"fixed64,2,opt,name=loanAmount,proto3" json:"loanAmount,omitempty"`
	AdminFee         float64 `protobuf:"fixed64,3,opt,name=adminFee,proto3" json:"adminFee,omitempty"`
	OriginalLoanDate string  `protobuf:"bytes,4,opt,name=originalLoanDate,proto3" json:"originalLoanDate,omitempty"`
	MaturityDate     string  `protobuf:"bytes,5,opt,name=maturityDate,proto3" json:"maturityDate,omitempty"`
}

func (x *ReqLoanPreview) Reset() {
	*x = ReqLoanPreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laon_account_request_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqLoanPreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqLoanPreview) ProtoMessage() {}

func (x *ReqLoanPreview) ProtoReflect() protoreflect.Message {
	mi := &file_laon_account_request_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqLoanPreview.ProtoReflect.Descriptor instead.
func (*ReqLoanPreview) Descriptor() ([]byte, []int) {
	return file_laon_account_request_proto_rawDescGZIP(), []int{2}
}

func (x *ReqLoanPreview) GetInterestRate() float64 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *ReqLoanPreview) GetLoanAmount() float64 {
	if x != nil {
		return x.LoanAmount
	}
	return 0
}

func (x *ReqLoanPreview) GetAdminFee() float64 {
	if x != nil {
		return x.AdminFee
	}
	return 0
}

func (x *ReqLoanPreview) GetOriginalLoanDate() string {
	if x != nil {
		return x.OriginalLoanDate
	}
	return ""
}

func (x *ReqLoanPreview) GetMaturityDate() string {
	if x != nil {
		return x.MaturityDate
	}
	return ""
}

type InterestSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterestRate float64 `protobuf:"fixed64,1,opt,name=interestRate,proto3" json:"interestRate,omitempty"`
	ValidFrom    string  `protobuf:"bytes,2,opt,name=validFrom,proto3" json:"validFrom,omitempty"`
}

func (x *InterestSetting) Reset() {
	*x = InterestSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laon_account_request_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterestSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterestSetting) ProtoMessage() {}

func (x *InterestSetting) ProtoReflect() protoreflect.Message {
	mi := &file_laon_account_request_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InterestSetting.ProtoReflect.Descriptor instead.
func (*InterestSetting) Descriptor() ([]byte, []int) {
	return file_laon_account_request_proto_rawDescGZIP(), []int{3}
}

func (x *InterestSetting) GetInterestRate() float64 {
	if x != nil {
		return x.InterestRate
	}
	return 0
}

func (x *InterestSetting) GetValidFrom() string {
	if x != nil {
		return x.ValidFrom
	}
	return ""
}

var File_laon_account_request_proto protoreflect.FileDescriptor

var file_laon_account_request_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6c, 0x61, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x6c, 0x6f, 0x73, 0x22, 0xfd, 0x20, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x61,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x6c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x6f, 0x61, 0x6e, 0x54, 0x65, 0x6e, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6c, 0x6f, 0x61, 0x6e, 0x54, 0x65, 0x6e, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x6f, 0x77, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x6c, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x6f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x77, 0x12, 0x34, 0x0a, 0x15, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x69,
	0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5a,
	0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x41, 0x72, 0x65, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x41, 0x72, 0x65, 0x61, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x65, 0x61, 0x12, 0x28, 0x0a, 0x0f,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67,
	0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62,
	0x75, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x66, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x69, 0x66, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x66,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x66, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x66, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x66, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x69, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x72, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x46, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x73, 0x75, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x69, 0x6e,
	0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x69, 0x6e, 0x73,
	0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x74,
	0x70, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x74, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x70,
	0x77, 0x70, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x70, 0x77, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x74,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6b, 0x74, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f,
	0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x72, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x72, 0x77, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x77, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x69,
	0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x31, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x32, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x47,
	0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x41, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x6f,
	0x62, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x20, 0x0a, 0x0b,
	0x6a, 0x6f, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x47, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6a, 0x6f, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x79, 0x65, 0x61, 0x72, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x79, 0x65, 0x61, 0x72, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x52, 0x77, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x52, 0x77, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x53, 0x75, 0x62, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x69, 0x74, 0x79, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5a, 0x69, 0x70,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x75,
	0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70,
	0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x6f, 0x75,
	0x73, 0x65, 0x4b, 0x74, 0x70, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x6f,
	0x75, 0x73, 0x65, 0x4b, 0x74, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x50, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x42, 0x69, 0x72, 0x74,
	0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x58, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x70, 0x6f,
	0x75, 0x73, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x70, 0x77, 0x70, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x70, 0x77, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x6f,
	0x75, 0x73, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28,
	0x0a, 0x0f, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x45,
	0x64, 0x75, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x70, 0x6f, 0x75,
	0x73, 0x65, 0x4d, 0x61, 0x72, 0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x61, 0x72,
	0x69, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x5f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x74,
	0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x77, 0x18, 0x61, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x77, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x53, 0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x53,
	0x75, 0x62, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70,
	0x6f, 0x75, 0x73, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x69, 0x74, 0x79,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x70, 0x6f, 0x75,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70,
	0x6f, 0x75, 0x73, 0x65, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x70, 0x6f, 0x75,
	0x73, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x6d,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x31, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x31, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x70, 0x6f, 0x75, 0x73,
	0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x32, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x70, 0x6f, 0x75, 0x73, 0x65, 0x4d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x70, 0x6f, 0x75,
	0x73, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x70, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x2b, 0x0a, 0x11, 0x52, 0x65,
	0x71, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x61, 0x6e, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x4c,
	0x6f, 0x61, 0x6e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x61, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x6f,
	0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0x53, 0x0a, 0x0f, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_laon_account_request_proto_rawDescOnce sync.Once
	file_laon_account_request_proto_rawDescData = file_laon_account_request_proto_rawDesc
)

func file_laon_account_request_proto_rawDescGZIP() []byte {
	file_laon_account_request_proto_rawDescOnce.Do(func() {
		file_laon_account_request_proto_rawDescData = protoimpl.X.CompressGZIP(file_laon_account_request_proto_rawDescData)
	})
	return file_laon_account_request_proto_rawDescData
}

var file_laon_account_request_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_laon_account_request_proto_goTypes = []interface{}{
	(*ReqLoanAccount)(nil),    // 0: protobuf.los.ReqLoanAccount
	(*ReqGetLoanAccount)(nil), // 1: protobuf.los.ReqGetLoanAccount
	(*ReqLoanPreview)(nil),    // 2: protobuf.los.ReqLoanPreview
	(*InterestSetting)(nil),   // 3: protobuf.los.InterestSetting
}
var file_laon_account_request_proto_depIdxs = []int32{
	3, // 0: protobuf.los.ReqLoanAccount.interestSettings:type_name -> protobuf.los.InterestSetting
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_laon_account_request_proto_init() }
func file_laon_account_request_proto_init() {
	if File_laon_account_request_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_laon_account_request_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLoanAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laon_account_request_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqGetLoanAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laon_account_request_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqLoanPreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laon_account_request_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterestSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_laon_account_request_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_laon_account_request_proto_goTypes,
		DependencyIndexes: file_laon_account_request_proto_depIdxs,
		MessageInfos:      file_laon_account_request_proto_msgTypes,
	}.Build()
	File_laon_account_request_proto = out.File
	file_laon_account_request_proto_rawDesc = nil
	file_laon_account_request_proto_goTypes = nil
	file_laon_account_request_proto_depIdxs = nil
}
